/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CircleFactory,
  CircleFactoryInterface,
} from "../../../contracts/CircleFactory.sol/CircleFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_circleImplementation",
        type: "address",
      },
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FailedDeployment",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "RegistryNotSet",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "circle",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "CircleCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newRegistry",
        type: "address",
      },
    ],
    name: "RegistryUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "circleImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes",
      },
    ],
    name: "createCircle",
    outputs: [
      {
        internalType: "address",
        name: "circle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "setRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461010357601f61073138819003918201601f19168301916001600160401b0383118484101761010857808492604094855283398101031261010357610052602061004b8361011e565b920161011e565b33156100ea57600080546001600160a01b031980821633908117845560405191956001600160a01b03959490938616907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3838216156100db5750608052169060015416176001556040516105fe9081610133823960805181818161016301526103cf0152f35b63340aafcd60e11b8152600490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101035756fe60406080815260048036101561001457600080fd5b600091823560e01c8063715018a6146104b65780637b1039991461048d5780638da5cb5b14610465578063a91ee0dc146103fe578063c595b5a0146103ba578063d8a69b8b146100fd5763f2fde38b1461006d57600080fd5b346100f95760203660031901126100f9576001600160a01b038235818116939192908490036100f55761009e610543565b83156100df57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b5091346103b757826003193601126103b75767ffffffffffffffff9282358481116100f95761012f9036908501610510565b9060249384358781116103b3576101499036908801610510565b60015491979096916001600160a01b03908116156103a4577f000000000000000000000000000000000000000000000000000000000000000098763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8b60881c161785526e5af43d82803e903d91602b57fd5bf360209a60781b178a526037600986f090828216998a1561039457889286888e61021c82968f9661020a8f8699519b8c9687019863075b125f60e11b8a52339088015260606044880152608487019161056f565b8481036023190160648601529161056f565b0395610230601f1997888101835282610590565b51925af1903d1561038e573d8c811161037c576102568c8b5193601f8401160183610590565b8152858b3d92013e5b156103435760015416803b1561033f57908380928489518097819363078c141960e01b83528d878401525af1998a156103355788999a9897986102e3575b50505050506102da7f1e54e1126d43df9ca32c9ef2bf513a47b2ce32c2b17982580c1e32ace425566091855191829189835233958a84019161056f565b0390a351908152f35b909192938095969750116103255750505083528391906102da7f1e54e1126d43df9ca32c9ef2bf513a47b2ce32c2b17982580c1e32ace425566038808061029d565b634e487b7160e01b825260419052fd5b87513d84823e3d90fd5b8380fd5b5060156064928988519362461bcd60e51b855284015282015274125b9a5d1a585b1a5e985d1a5bdb8819985a5b1959605a1b6044820152fd5b634e487b7160e01b8752604185528587fd5b5061025f565b895163b06ebf3d60e01b81528590fd5b508551630e048e7160e41b8152fd5b5080fd5b80fd5b8382346103b357816003193601126103b357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346103b35760203660031901126103b357356001600160a01b038116908190036103b35761042c610543565b600180546001600160a01b031916821790557fd6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd8280a280f35b8382346103b357816003193601126103b357905490516001600160a01b039091168152602090f35b8382346103b357816003193601126103b35760015490516001600160a01b039091168152602090f35b83346103b757806003193601126103b7576104cf610543565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b9181601f8401121561053e5782359167ffffffffffffffff831161053e576020838186019501011161053e57565b600080fd5b6000546001600160a01b0316330361055757565b60405163118cdaa760e01b8152336004820152602490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b90601f8019910116810190811067ffffffffffffffff8211176105b257604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a235c76a7ee2cd7e019c1af86b1824759a662193a937b7250577ca6a1989344864736f6c63430008140033";

type CircleFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CircleFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CircleFactory__factory extends ContractFactory {
  constructor(...args: CircleFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _circleImplementation: AddressLike,
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _circleImplementation,
      _registry,
      overrides || {}
    );
  }
  override deploy(
    _circleImplementation: AddressLike,
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _circleImplementation,
      _registry,
      overrides || {}
    ) as Promise<
      CircleFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CircleFactory__factory {
    return super.connect(runner) as CircleFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CircleFactoryInterface {
    return new Interface(_abi) as CircleFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CircleFactory {
    return new Contract(address, _abi, runner) as unknown as CircleFactory;
  }
}
