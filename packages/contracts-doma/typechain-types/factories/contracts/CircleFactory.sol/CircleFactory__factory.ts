/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CircleFactory,
  CircleFactoryInterface,
} from "../../../contracts/CircleFactory.sol/CircleFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_circleImplementation",
        type: "address",
      },
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FailedDeployment",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "RegistryNotSet",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "circle",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "CircleCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newRegistry",
        type: "address",
      },
    ],
    name: "RegistryUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "circleImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes",
      },
    ],
    name: "createCircle",
    outputs: [
      {
        internalType: "address",
        name: "circle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "setRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0346101b557610a6390601f38839003908101601f19168201906001600160401b038211838310176101ba57808391604095869485528339810103126101b557610049816101eb565b61005660208093016101eb565b331561019d576000549060018060a01b03199233848416176000556100bc865160018060a01b0394853391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3676d2e6c386f884f5e878201528681526101d0565b6100d6865167d39c82b89754f0be878201528681526101d0565b6100f0865167c88c49786214144e878201528681526101d0565b808316610122576004866101158782519067c426b991946e76cf8183015281526101d0565b5163340aafcd60e11b8152fd5b8594610176916101428751678e135396f71badfa848201528381526101d0565b61015c875167d01cff47db31ffb1848201528381526101d0565b60805285519067c7faa49ea6d523188183015281526101d0565b169060015416176001555161086390816102008239608051818181610226015261056f0152f35b8351631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176101ba57604052565b51906001600160a01b03821682036101b55756fe60406080815260048036101561001457600080fd5b600091823560e01c8063715018a6146106ff5780637b103999146106d65780638da5cb5b146106ae578063a91ee0dc146105a2578063c595b5a01461055a578063d8a69b8b146100fd5763f2fde38b1461006d57600080fd5b346100f95760203660031901126100f9576001600160a01b038235818116939192908490036100f55761009e61078c565b83156100df57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b50823461055757816003193601126105575767ffffffffffffffff83358181116100f95761012e9036908601610759565b6024939184358481116104f2576101489036908901610759565b9390958751966101696020986748d2856f72f000f38a8201528981526107b8565b61018389516753be53fba43321678a8201528981526107b8565b61019d895167feb7fcec2ea216ed8a8201528981526107b8565b6001546001600160a01b03919082166101da578a8a6101cd8b8251906735c9997ea3b415028183015281526107b8565b51630e048e7160e41b8152fd5b908a916101fa8b98999b51670b6e444a8b2be9c68c8201528b81526107b8565b610214885167eb5fed2aab50f35a8c8201528b81526107b8565b6e5af43d82803e903d91602b57fd5bf37f0000000000000000000000000000000000000000000000000000000000000000763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c1617875260781b178a526037600986f090828216998a1561054757889286888e6102ff82968f966102ed8f896102ac889b51676b90f21f65c78254898201528881526107b8565b6102c6815167f08e63fb83dd5d99898201528881526107b8565b519b8c9687019863075b125f60e11b8a52339088015260606044880152608487019161080c565b8481036023190160648601529161080c565b0395610313601f19978881018352826107ea565b51925af1903d15610541573d8c811161052f576103398c8b5193601f84011601836107ea565b8152858b3d92013e5b61035c8851671c62140d037602028c8201528b81526107b8565b6103768851670411eef506a151ad8c8201528b81526107b8565b610390885167190f3405a8b253248c8201528b81526107b8565b156104f6576103af875167ab31feaf42dcab4d8b8201528a81526107b8565b6103c987516721925d93f11e0c808b8201528a81526107b8565b6103e38751676fd77615d58cb0d98b8201528a81526107b8565b60015416803b156104f257908380928489518097819363078c141960e01b83528d878401525af1998a156104e85788999a989798610496575b505050505061048d7f1e54e1126d43df9ca32c9ef2bf513a47b2ce32c2b17982580c1e32ace425566091610460865167d969c872902f885d8a8201528981526107b8565b61047a8651675c30541a295a9cfe8a8201528981526107b8565b855191829189835233958a84019161080c565b0390a351908152f35b909192938095969750116104d857505050835283919061048d7f1e54e1126d43df9ca32c9ef2bf513a47b2ce32c2b17982580c1e32ace425566088808061041c565b634e487b7160e01b825260419052fd5b87513d84823e3d90fd5b8380fd5b5060156064928988519362461bcd60e51b855284015282015274125b9a5d1a585b1a5e985d1a5bdb8819985a5b1959605a1b6044820152fd5b634e487b7160e01b8752604185528587fd5b50610342565b895163b06ebf3d60e01b81528590fd5b80fd5b83823461059e578160031936011261059e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b50346100f957602091826003193601126104f257356001600160a01b03811692908390036104f257816105e86106879351673247469db550fdf7848201528381526107b8565b6105f061078c565b61060a815167bdd49ffc97bafb3a848201528381526107b8565b6106248151676f32224bdd4c338d848201528381526107b8565b61063e815167558f910dec238bb7848201528381526107b8565b836bffffffffffffffffffffffff60a01b6001541617600155610671815167c2e686320a68f514848201528381526107b8565b519067b37da0be8e262b8f8183015281526107b8565b7fd6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd8280a280f35b83823461059e578160031936011261059e57905490516001600160a01b039091168152602090f35b83823461059e578160031936011261059e5760015490516001600160a01b039091168152602090f35b833461055757806003193601126105575761071861078c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b9181601f840112156107875782359167ffffffffffffffff8311610787576020838186019501011161078757565b600080fd5b6000546001600160a01b031633036107a057565b60405163118cdaa760e01b8152336004820152602490fd5b6040810190811067ffffffffffffffff8211176107d457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176107d457604052565b908060209392818452848401376000828201840152601f01601f191601019056fea2646970667358221220224a36a4db12e04bdc331a0e99a2774234f5ac81bb55d259738c971c63fdb80f64736f6c63430008140033";

type CircleFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CircleFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CircleFactory__factory extends ContractFactory {
  constructor(...args: CircleFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _circleImplementation: AddressLike,
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _circleImplementation,
      _registry,
      overrides || {}
    );
  }
  override deploy(
    _circleImplementation: AddressLike,
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _circleImplementation,
      _registry,
      overrides || {}
    ) as Promise<
      CircleFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CircleFactory__factory {
    return super.connect(runner) as CircleFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CircleFactoryInterface {
    return new Interface(_abi) as CircleFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CircleFactory {
    return new Contract(address, _abi, runner) as unknown as CircleFactory;
  }
}
