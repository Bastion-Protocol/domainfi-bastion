/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockAuction,
  MockAuctionInterface,
} from "../../../../contracts/mocks/MockContracts.sol/MockAuction";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "auctionId",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "auctionId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
    ],
    name: "placeBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "auctionId",
        type: "uint256",
      },
    ],
    name: "settle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761012e908161001c8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c908163379607f5146099575080635e62be2514606e57638df8280014603e57600080fd5b34606b576020366003190112606b57606860405167c7f67ad3ca328d5060208201526020815260c7565b80f35b80fd5b5034606b576060366003190112606b576068604051674f7fdc3d299d879560208201526020815260c7565b90503460c357602036600319011260c357806792bf7eabc2e2fe9a602060689301526020815260c7565b5080fd5b6040810190811067ffffffffffffffff82111760e257604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fb128051b462e0d2a91df9a94f540bc93a4348000655fda2418c058e80513de464736f6c63430008140033";

type MockAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAuction__factory extends ContractFactory {
  constructor(...args: MockAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAuction & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAuction__factory {
    return super.connect(runner) as MockAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAuctionInterface {
    return new Interface(_abi) as MockAuctionInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockAuction {
    return new Contract(address, _abi, runner) as unknown as MockAuction;
  }
}
