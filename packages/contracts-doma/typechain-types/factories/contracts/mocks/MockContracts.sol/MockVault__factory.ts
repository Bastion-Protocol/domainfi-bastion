/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockVault,
  MockVaultInterface,
} from "../../../../contracts/mocks/MockContracts.sol/MockVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "auctionId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "domainTokenId",
        type: "uint256",
      },
    ],
    name: "depositDomain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "auctionId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "withdrawDomain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761010a908161001c8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c9081632b1885841460645750637e470c3314603457600080fd5b346061576040366003190112606157605e60405167386546763e6d318260208201526020815260a3565b80f35b80fd5b905034609f576040366003190112609f576024356001600160a01b03811603609f578067dcedd58135e6bfe96020605e9301526020815260a3565b5080fd5b6040810190811067ffffffffffffffff82111760be57604052565b634e487b7160e01b600052604160045260246000fdfea26469706673582212207e5288e33f43c0a85941680d7bad532f6740c856be4fa53fa39362da7881efa564736f6c63430008140033";

type MockVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVault__factory extends ContractFactory {
  constructor(...args: MockVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockVault & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockVault__factory {
    return super.connect(runner) as MockVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultInterface {
    return new Interface(_abi) as MockVaultInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockVault {
    return new Contract(address, _abi, runner) as unknown as MockVault;
  }
}
