/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockAuctionAdapter,
  MockAuctionAdapterInterface,
} from "../../../../contracts/mocks/MockContracts.sol/MockAuctionAdapter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "auctionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
    ],
    name: "BidPlaced",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "auctionId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
    ],
    name: "placeBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760ae908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c635e62be2514602857600080fd5b34607457606036600319011260745760607f6e071b3ecca1348e93201ab40ec33e13c163fc1ac7969101e82a6f3e413381c591600435815260243560208201526044356040820152a180f35b5080fdfea264697066735822122007d19048c96595d26a5aebd3ff055855e53694bfe1a107019a792f858936137764736f6c63430008140033";

type MockAuctionAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAuctionAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAuctionAdapter__factory extends ContractFactory {
  constructor(...args: MockAuctionAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAuctionAdapter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAuctionAdapter__factory {
    return super.connect(runner) as MockAuctionAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAuctionAdapterInterface {
    return new Interface(_abi) as MockAuctionAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAuctionAdapter {
    return new Contract(address, _abi, runner) as unknown as MockAuctionAdapter;
  }
}
