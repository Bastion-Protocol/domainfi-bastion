/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CircleVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchWithdraw"
      | "depositDomain"
      | "domainCustody"
      | "domainNFT"
      | "emergencyPause"
      | "emergencyUnpause"
      | "getSigners"
      | "isSigner"
      | "onClaim"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "requiredSignatures"
      | "signers"
      | "transferOwnership"
      | "withdraw"
      | "withdrawDomain"
      | "withdrawalApprovalCount"
      | "withdrawalApprovals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CustodyChanged"
      | "EmergencyPaused"
      | "EmergencyUnpaused"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchWithdraw",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDomain",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainCustody",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "domainNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDomain",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalApprovalCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalApprovals",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainCustody",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domainNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalApprovalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalApprovals",
    data: BytesLike
  ): Result;
}

export namespace CustodyChangedEvent {
  export type InputTuple = [
    domainTokenId: BigNumberish,
    newCustodian: AddressLike,
    action: string
  ];
  export type OutputTuple = [
    domainTokenId: bigint,
    newCustodian: string,
    action: string
  ];
  export interface OutputObject {
    domainTokenId: bigint;
    newCustodian: string;
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPausedEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyUnpausedEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CircleVault extends BaseContract {
  connect(runner?: ContractRunner | null): CircleVault;
  waitForDeployment(): Promise<this>;

  interface: CircleVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchWithdraw: TypedContractMethod<
    [domainTokenIds: BigNumberish[], recipients: AddressLike[]],
    [void],
    "nonpayable"
  >;

  depositDomain: TypedContractMethod<
    [auctionId: BigNumberish, domainTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  domainCustody: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  domainNFT: TypedContractMethod<[], [string], "view">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  getSigners: TypedContractMethod<[], [string[]], "view">;

  isSigner: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  onClaim: TypedContractMethod<
    [auctionId: BigNumberish, domainTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requiredSignatures: TypedContractMethod<[], [bigint], "view">;

  signers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [domainTokenId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawDomain: TypedContractMethod<
    [auctionId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawalApprovalCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawalApprovals: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchWithdraw"
  ): TypedContractMethod<
    [domainTokenIds: BigNumberish[], recipients: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositDomain"
  ): TypedContractMethod<
    [auctionId: BigNumberish, domainTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainCustody"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "domainNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getSigners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isSigner"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "onClaim"
  ): TypedContractMethod<
    [auctionId: BigNumberish, domainTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiredSignatures"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "signers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [domainTokenId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawDomain"
  ): TypedContractMethod<
    [auctionId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalApprovalCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawalApprovals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "CustodyChanged"
  ): TypedContractEvent<
    CustodyChangedEvent.InputTuple,
    CustodyChangedEvent.OutputTuple,
    CustodyChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPaused"
  ): TypedContractEvent<
    EmergencyPausedEvent.InputTuple,
    EmergencyPausedEvent.OutputTuple,
    EmergencyPausedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyUnpaused"
  ): TypedContractEvent<
    EmergencyUnpausedEvent.InputTuple,
    EmergencyUnpausedEvent.OutputTuple,
    EmergencyUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CustodyChanged(uint256,address,string)": TypedContractEvent<
      CustodyChangedEvent.InputTuple,
      CustodyChangedEvent.OutputTuple,
      CustodyChangedEvent.OutputObject
    >;
    CustodyChanged: TypedContractEvent<
      CustodyChangedEvent.InputTuple,
      CustodyChangedEvent.OutputTuple,
      CustodyChangedEvent.OutputObject
    >;

    "EmergencyPaused(address)": TypedContractEvent<
      EmergencyPausedEvent.InputTuple,
      EmergencyPausedEvent.OutputTuple,
      EmergencyPausedEvent.OutputObject
    >;
    EmergencyPaused: TypedContractEvent<
      EmergencyPausedEvent.InputTuple,
      EmergencyPausedEvent.OutputTuple,
      EmergencyPausedEvent.OutputObject
    >;

    "EmergencyUnpaused(address)": TypedContractEvent<
      EmergencyUnpausedEvent.InputTuple,
      EmergencyUnpausedEvent.OutputTuple,
      EmergencyUnpausedEvent.OutputObject
    >;
    EmergencyUnpaused: TypedContractEvent<
      EmergencyUnpausedEvent.InputTuple,
      EmergencyUnpausedEvent.OutputTuple,
      EmergencyUnpausedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
