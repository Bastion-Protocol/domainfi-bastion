/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ICircleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProposal"
      | "deposit"
      | "executeProposal"
      | "getMemberCount"
      | "getProposal"
      | "getTreasuryBalance"
      | "isMember"
      | "joinCircle"
      | "leaveCircle"
      | "onAuctionResult"
      | "vote"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MemberJoined"
      | "MemberLeft"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "TreasuryDeposit"
      | "TreasuryWithdrawal"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCircle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveCircle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onAuctionResult",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinCircle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaveCircle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAuctionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace MemberJoinedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberLeftEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    description: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    description: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryDepositEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryWithdrawalEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: boolean,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: boolean,
    weight: bigint
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: boolean;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICircle extends BaseContract {
  connect(runner?: ContractRunner | null): ICircle;
  waitForDeployment(): Promise<this>;

  interface: ICircleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProposal: TypedContractMethod<
    [description: string],
    [bigint],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMemberCount: TypedContractMethod<[], [bigint], "view">;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        description: string;
        votesFor: bigint;
        votesAgainst: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getTreasuryBalance: TypedContractMethod<[], [bigint], "view">;

  isMember: TypedContractMethod<[member: AddressLike], [boolean], "view">;

  joinCircle: TypedContractMethod<[member: AddressLike], [void], "nonpayable">;

  leaveCircle: TypedContractMethod<[member: AddressLike], [void], "nonpayable">;

  onAuctionResult: TypedContractMethod<
    [auctionId: BigNumberish, winner: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<[description: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMemberCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        description: string;
        votesFor: bigint;
        votesAgainst: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTreasuryBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isMember"
  ): TypedContractMethod<[member: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinCircle"
  ): TypedContractMethod<[member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "leaveCircle"
  ): TypedContractMethod<[member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onAuctionResult"
  ): TypedContractMethod<
    [auctionId: BigNumberish, winner: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MemberJoined"
  ): TypedContractEvent<
    MemberJoinedEvent.InputTuple,
    MemberJoinedEvent.OutputTuple,
    MemberJoinedEvent.OutputObject
  >;
  getEvent(
    key: "MemberLeft"
  ): TypedContractEvent<
    MemberLeftEvent.InputTuple,
    MemberLeftEvent.OutputTuple,
    MemberLeftEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryDeposit"
  ): TypedContractEvent<
    TreasuryDepositEvent.InputTuple,
    TreasuryDepositEvent.OutputTuple,
    TreasuryDepositEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryWithdrawal"
  ): TypedContractEvent<
    TreasuryWithdrawalEvent.InputTuple,
    TreasuryWithdrawalEvent.OutputTuple,
    TreasuryWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "MemberJoined(address)": TypedContractEvent<
      MemberJoinedEvent.InputTuple,
      MemberJoinedEvent.OutputTuple,
      MemberJoinedEvent.OutputObject
    >;
    MemberJoined: TypedContractEvent<
      MemberJoinedEvent.InputTuple,
      MemberJoinedEvent.OutputTuple,
      MemberJoinedEvent.OutputObject
    >;

    "MemberLeft(address)": TypedContractEvent<
      MemberLeftEvent.InputTuple,
      MemberLeftEvent.OutputTuple,
      MemberLeftEvent.OutputObject
    >;
    MemberLeft: TypedContractEvent<
      MemberLeftEvent.InputTuple,
      MemberLeftEvent.OutputTuple,
      MemberLeftEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "TreasuryDeposit(address,uint256)": TypedContractEvent<
      TreasuryDepositEvent.InputTuple,
      TreasuryDepositEvent.OutputTuple,
      TreasuryDepositEvent.OutputObject
    >;
    TreasuryDeposit: TypedContractEvent<
      TreasuryDepositEvent.InputTuple,
      TreasuryDepositEvent.OutputTuple,
      TreasuryDepositEvent.OutputObject
    >;

    "TreasuryWithdrawal(address,uint256)": TypedContractEvent<
      TreasuryWithdrawalEvent.InputTuple,
      TreasuryWithdrawalEvent.OutputTuple,
      TreasuryWithdrawalEvent.OutputObject
    >;
    TreasuryWithdrawal: TypedContractEvent<
      TreasuryWithdrawalEvent.InputTuple,
      TreasuryWithdrawalEvent.OutputTuple,
      TreasuryWithdrawalEvent.OutputObject
    >;

    "VoteCast(address,uint256,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
