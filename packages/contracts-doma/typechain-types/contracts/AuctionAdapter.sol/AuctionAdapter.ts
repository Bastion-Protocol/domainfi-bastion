/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AuctionAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auction"
      | "claimAuction"
      | "depositDomain"
      | "owner"
      | "placeBid"
      | "renounceOwnership"
      | "setAuction"
      | "setVault"
      | "settleAuction"
      | "transferOwnership"
      | "vault"
      | "withdrawDomain"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionClaimed"
      | "AuctionSettled"
      | "BidPlaced"
      | "DomainDeposited"
      | "DomainWithdrawn"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "auction", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDomain",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuction",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDomain",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDomain",
    data: BytesLike
  ): Result;
}

export namespace AuctionClaimedEvent {
  export type InputTuple = [auctionId: BigNumberish, claimer: AddressLike];
  export type OutputTuple = [auctionId: bigint, claimer: string];
  export interface OutputObject {
    auctionId: bigint;
    claimer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionSettledEvent {
  export type InputTuple = [auctionId: BigNumberish];
  export type OutputTuple = [auctionId: bigint];
  export interface OutputObject {
    auctionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    circle: AddressLike,
    auctionId: BigNumberish,
    amount: BigNumberish,
    minAmountOut: BigNumberish
  ];
  export type OutputTuple = [
    circle: string,
    auctionId: bigint,
    amount: bigint,
    minAmountOut: bigint
  ];
  export interface OutputObject {
    circle: string;
    auctionId: bigint;
    amount: bigint;
    minAmountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainDepositedEvent {
  export type InputTuple = [auctionId: BigNumberish, domain: AddressLike];
  export type OutputTuple = [auctionId: bigint, domain: string];
  export interface OutputObject {
    auctionId: bigint;
    domain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainWithdrawnEvent {
  export type InputTuple = [auctionId: BigNumberish, to: AddressLike];
  export type OutputTuple = [auctionId: bigint, to: string];
  export interface OutputObject {
    auctionId: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuctionAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): AuctionAdapter;
  waitForDeployment(): Promise<this>;

  interface: AuctionAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auction: TypedContractMethod<[], [string], "view">;

  claimAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositDomain: TypedContractMethod<
    [auctionId: BigNumberish, domainTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<
    [auctionId: BigNumberish, amount: BigNumberish, minAmountOut: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAuction: TypedContractMethod<
    [_auction: AddressLike],
    [void],
    "nonpayable"
  >;

  setVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  settleAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  withdrawDomain: TypedContractMethod<
    [auctionId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimAuction"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositDomain"
  ): TypedContractMethod<
    [auctionId: BigNumberish, domainTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [auctionId: BigNumberish, amount: BigNumberish, minAmountOut: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuction"
  ): TypedContractMethod<[_auction: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settleAuction"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawDomain"
  ): TypedContractMethod<
    [auctionId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuctionClaimed"
  ): TypedContractEvent<
    AuctionClaimedEvent.InputTuple,
    AuctionClaimedEvent.OutputTuple,
    AuctionClaimedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionSettled"
  ): TypedContractEvent<
    AuctionSettledEvent.InputTuple,
    AuctionSettledEvent.OutputTuple,
    AuctionSettledEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "DomainDeposited"
  ): TypedContractEvent<
    DomainDepositedEvent.InputTuple,
    DomainDepositedEvent.OutputTuple,
    DomainDepositedEvent.OutputObject
  >;
  getEvent(
    key: "DomainWithdrawn"
  ): TypedContractEvent<
    DomainWithdrawnEvent.InputTuple,
    DomainWithdrawnEvent.OutputTuple,
    DomainWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AuctionClaimed(uint256,address)": TypedContractEvent<
      AuctionClaimedEvent.InputTuple,
      AuctionClaimedEvent.OutputTuple,
      AuctionClaimedEvent.OutputObject
    >;
    AuctionClaimed: TypedContractEvent<
      AuctionClaimedEvent.InputTuple,
      AuctionClaimedEvent.OutputTuple,
      AuctionClaimedEvent.OutputObject
    >;

    "AuctionSettled(uint256)": TypedContractEvent<
      AuctionSettledEvent.InputTuple,
      AuctionSettledEvent.OutputTuple,
      AuctionSettledEvent.OutputObject
    >;
    AuctionSettled: TypedContractEvent<
      AuctionSettledEvent.InputTuple,
      AuctionSettledEvent.OutputTuple,
      AuctionSettledEvent.OutputObject
    >;

    "BidPlaced(address,uint256,uint256,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "DomainDeposited(uint256,address)": TypedContractEvent<
      DomainDepositedEvent.InputTuple,
      DomainDepositedEvent.OutputTuple,
      DomainDepositedEvent.OutputObject
    >;
    DomainDeposited: TypedContractEvent<
      DomainDepositedEvent.InputTuple,
      DomainDepositedEvent.OutputTuple,
      DomainDepositedEvent.OutputObject
    >;

    "DomainWithdrawn(uint256,address)": TypedContractEvent<
      DomainWithdrawnEvent.InputTuple,
      DomainWithdrawnEvent.OutputTuple,
      DomainWithdrawnEvent.OutputObject
    >;
    DomainWithdrawn: TypedContractEvent<
      DomainWithdrawnEvent.InputTuple,
      DomainWithdrawnEvent.OutputTuple,
      DomainWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
