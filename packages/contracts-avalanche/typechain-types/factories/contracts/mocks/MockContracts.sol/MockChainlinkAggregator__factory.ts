/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockChainlinkAggregator,
  MockChainlinkAggregatorInterface,
} from "../../../../contracts/mocks/MockContracts.sol/MockChainlinkAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "initialPrice",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "newPrice",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461005057601f61010c38819003918201601f19168301916001600160401b0383118484101761005557808492602094604052833981010312610050575160005560405160a0908161006c8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080806040526004361015601257600080fd5b600090813560e01c90816350d25bcd14604e575063f7a3080614603457600080fd5b34604b576020366003190112604b57600435815580f35b80fd5b90503460665781600319360112606657602091548152f35b5080fdfea2646970667358221220815075a42e82c1cd8d9eb17e3a35c9d3fdd142949ea45f3762214df4371409cc64736f6c63430008140033";

type MockChainlinkAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockChainlinkAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockChainlinkAggregator__factory extends ContractFactory {
  constructor(...args: MockChainlinkAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialPrice: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialPrice, overrides || {});
  }
  override deploy(
    initialPrice: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialPrice, overrides || {}) as Promise<
      MockChainlinkAggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockChainlinkAggregator__factory {
    return super.connect(runner) as MockChainlinkAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockChainlinkAggregatorInterface {
    return new Interface(_abi) as MockChainlinkAggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockChainlinkAggregator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockChainlinkAggregator;
  }
}
