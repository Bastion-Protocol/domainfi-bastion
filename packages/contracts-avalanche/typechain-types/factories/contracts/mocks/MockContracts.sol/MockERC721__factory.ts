/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockERC721,
  MockERC721Interface,
} from "../../../../contracts/mocks/MockContracts.sol/MockERC721";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721IncorrectOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721InsufficientApproval",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC721InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ERC721InvalidOperator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721InvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC721InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC721InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721NonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346200031d57620000168162000322565b60078152602066135bd8dad3919560ca1b81830152604051916200003a8362000322565b60048352631353919560e21b8284015280516001600160401b0390818111620003075760008054916001948584811c94168015620002fc575b87851014620002e8578190601f9485811162000295575b5087908583116001146200023157849262000225575b5050600019600383901b1c191690851b1781555b8551928311620002115783548481811c9116801562000206575b86821014620001f257828111620001aa575b508491831160011462000142579062000126958362000136575b5050600019600383901b1c191690821b1790555b6040519066b39de0a5049b2f81830152815262000322565b604051610ca490816200033f8239f35b015190503880620000fa565b9194601f198616848452858420935b8181106200019457509184939187620001269894106200017a575b505050811b0190556200010e565b015160001960f88460031b161c191690553880806200016c565b8284015185559385019392860192860162000151565b8482528582208380860160051c820192888710620001e8575b0160051c019085905b828110620001dc575050620000e0565b838155018590620001cc565b92508192620001c3565b634e487b7160e01b82526022600452602482fd5b90607f1690620000ce565b634e487b7160e01b81526041600452602490fd5b015190503880620000a0565b8480528885208894509190601f198416865b8b8282106200027e575050841162000264575b505050811b018155620000b4565b015160001960f88460031b161c1916905538808062000256565b8385015186558b9790950194938401930162000243565b9091508380528784208580850160051c8201928a8610620002de575b918991869594930160051c01915b828110620002cf5750506200008a565b868155859450899101620002bf565b92508192620002b1565b634e487b7160e01b83526022600452602483fd5b93607f169362000073565b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b03821117620003075760405256fe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a7146107a25750816306fdde03146106d7578163081812fc1461069b578163095ea7b3146105be57816323b872dd146105a657816340c10f191461045957816342842e0e146104305781636352211e146103ff57816370a08231146103aa57816395d89b4114610291578163a22cb465146101ef578163b88d4fde14610161578163c87b56dd1461010f575063e985e9c5146100bf57600080fd5b3461010b578060031936011261010b5760ff816020936100dd61084d565b6100e5610868565b6001600160a01b0391821683526005875283832091168252855220549151911615158152f35b5080fd5b83833461010b57602036600319011261010b5761012f61015d9335610c33565b5081815161013c816108e5565b52805191610149836108e5565b82525191829160208352602083019061080d565b0390f35b919050346101eb5760803660031901126101eb5761017d61084d565b610185610868565b846064359467ffffffffffffffff861161010b573660238701121561010b57850135946101bd6101b487610923565b95519586610901565b858552366024878301011161010b57856101e896602460209301838801378501015260443591610ade565b80f35b8280fd5b919050346101eb57806003193601126101eb5761020a61084d565b906024359182151580930361028d576001600160a01b03169283156102785750338452600560205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b836024925191630b61174360e31b8352820152fd5b8480fd5b8284346103a757806003193601126103a7578151918160019283549384811c9181861695861561039d575b602096878510811461038a578899509688969785829a529182600014610363575050600114610308575b50505061015d92916102f9910385610901565b5192828493845283019061080d565b91908693508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061034b57505050820101816102f961015d6102e6565b8054848a018601528895508794909301928101610332565b60ff19168782015293151560051b860190930193508492506102f9915061015d90506102e6565b634e487b7160e01b835260228a52602483fd5b92607f16926102bc565b80fd5b8284346103a75760203660031901126103a7576001600160a01b036103cd61084d565b169283156103ea5750806020938392526003845220549051908152f35b91516322718ad960e21b815291820152602490fd5b8284346103a75760203660031901126103a7575061041f60209235610c33565b90516001600160a01b039091168152f35b50503461010b576101e8906104443661087e565b91925192610451846108e5565b858452610ade565b919050346101eb57806003193601126101eb5761047461084d565b6024358251916104956020936792d96373e0c11e40858201528481526108b3565b6104af8451677c4958c2ba1211fd858201528481526108b3565b6104c98451672c7937346c18aa2e858201528481526108b3565b6001600160a01b0390811690811561058f578287526002845284872054166002811515948561055c575b83895260038152868920805460010190558489525284872080546001600160a01b031916831790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8780a4610547578280f35b9160249251916339e3563760e11b8352820152fd5b600085815260046020526040902080546001600160a01b03191690558289526003815286892080546000190190556104f3565b8451633250574960e11b8152808701889052602490fd5b83346103a7576101e86105b83661087e565b9161093f565b919050346101eb57806003193601126101eb576105d961084d565b916024356105e681610c33565b33151580610688575b8061065f575b610649576001600160a01b039485169482918691167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258880a48452602052822080546001600160a01b031916909117905580f35b835163a9fbf51f60e01b81523381850152602490fd5b506001600160a01b03811686526005602090815284872033885290528386205460ff16156105f5565b506001600160a01b0381163314156105ef565b9050346101eb5760203660031901126101eb579182602093356106bd81610c33565b50825283528190205490516001600160a01b039091168152f35b8284346103a757806003193601126103a75781519181825492600184811c91818616958615610798575b602096878510811461038a578899509688969785829a52918260001461036357505060011461073d5750505061015d92916102f9910385610901565b91908693508280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061078057505050820101816102f961015d6102e6565b8054848a018601528895508794909301928101610767565b92607f1692610701565b8491346101eb5760203660031901126101eb573563ffffffff60e01b81168091036101eb57602092506380ac58cd60e01b81149081156107fc575b81156107eb575b5015158152f35b6301ffc9a760e01b149050836107e4565b635b5e139f60e01b811491506107dd565b919082519283825260005b848110610839575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610818565b600435906001600160a01b038216820361086357565b600080fd5b602435906001600160a01b038216820361086357565b6060906003190112610863576001600160a01b0390600435828116810361086357916024359081168103610863579060443590565b6040810190811067ffffffffffffffff8211176108cf57604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff8211176108cf57604052565b90601f8019910116810190811067ffffffffffffffff8211176108cf57604052565b67ffffffffffffffff81116108cf57601f01601f191660200190565b6001600160a01b039182169290918315610ac557600092828452826020956002875260409684888820541696879133151580610a2f575b509060027fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92846109fc575b858352600381528b8320805460010190558683525289812080546001600160a01b0319168517905580a416928383036109db5750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b600087815260046020526040902080546001600160a01b0319169055848352600381528b832080546000190190556109a2565b91939450915080610a84575b15610a4b57859291879138610976565b878688610a68576024915190637e27328960e01b82526004820152fd5b604491519063177e802f60e01b82523360048301526024820152fd5b503387148015610aa9575b80610a3b5750858252600481523385898420541614610a3b565b5086825260058152878220338352815260ff8883205416610a8f565b604051633250574960e11b815260006004820152602490fd5b929092610aec83858361093f565b833b610af9575b50505050565b604051630a85bd0160e11b8082523360048301526001600160a01b0392831660248301526044820194909452608060648201529493169260209290918590610b4590608483019061080d565b039483816000978189895af1869181610bef575b50610bba575050503d600014610bb1573d610b7381610923565b90610b816040519283610901565b81528093823d92013e5b82519283610bac57604051633250574960e11b815260048101849052602490fd5b019050fd5b60609250610b8b565b919450915063ffffffff60e01b1603610bd7575038808080610af3565b60249060405190633250574960e11b82526004820152fd5b9091508481813d8311610c2c575b610c078183610901565b81010312610c2857516001600160e01b031981168103610c28579038610b59565b8680fd5b503d610bfd565b6000818152600260205260409020546001600160a01b0316908115610c56575090565b60249060405190637e27328960e01b82526004820152fdfea26469706673582212204a4a86b66086da76ae219b2556c88dfe546fcf2d5293171c067d793764bfb1b364736f6c63430008140033";

type MockERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC721__factory extends ContractFactory {
  constructor(...args: MockERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockERC721 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC721__factory {
    return super.connect(runner) as MockERC721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC721Interface {
    return new Interface(_abi) as MockERC721Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC721 {
    return new Contract(address, _abi, runner) as unknown as MockERC721;
  }
}
