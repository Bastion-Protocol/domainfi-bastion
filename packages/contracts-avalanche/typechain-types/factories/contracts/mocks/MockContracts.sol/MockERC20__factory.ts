/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../../contracts/mocks/MockContracts.sol/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234620003775762000c80803803809162000020828562000398565b83398101606082820312620003775781516001600160401b03919082811162000377578162000051918501620003bc565b9260209182820151848111620003775760409162000071918401620003bc565b9101519260ff84168094036200037757845181811162000277576003908154906001978883811c931680156200036c575b8784101462000356578190601f9384811162000300575b50879084831160011462000299576000926200028d575b505060001982851b1c191690881b1782555b8351928311620002775760049384548881811c911680156200026c575b8782101462000257578281116200020c575b50859184116001146200019f57620001789697849392849260009562000193575b50501b92600019911b1c19161790555b6200015f604051675f5c0983be8bcfa9838201528281526200037c565b6040519067d6df2b2ef679a9c88183015281526200037c565b60ff19600554161760055560405161084c9081620004348239f35b01519350388062000132565b969291601f1983169185600052866000209260005b818110620001f65750988462000178999a10620001db575b50505050811b01905562000142565b01519060f884600019921b161c1916905538808080620001cc565b8a830151855593860193918801918801620001b4565b85600052866000208380870160051c8201928988106200024d575b0160051c019089905b8281106200024057505062000111565b6000815501899062000230565b9250819262000227565b602286634e487b7160e01b6000525260246000fd5b90607f1690620000ff565b634e487b7160e01b600052604160045260246000fd5b015190503880620000d0565b908a9350601f1983169186600052896000209260005b8b828210620002e95750508411620002d0575b505050811b018255620000e2565b015160001983871b60f8161c19169055388080620002c2565b8385015186558e97909501949384019301620002af565b90915084600052876000208480850160051c8201928a86106200034c575b918c91869594930160051c01915b8281106200033c575050620000b9565b600081558594508c91016200032c565b925081926200031e565b634e487b7160e01b600052602260045260246000fd5b92607f1692620000a2565b600080fd5b604081019081106001600160401b038211176200027757604052565b601f909101601f19168101906001600160401b038211908210176200027757604052565b919080601f8401121562000377578251906001600160401b038211620002775760405191602091620003f8601f8301601f191684018562000398565b818452828287010111620003775760005b8181106200041f57508260009394955001015290565b85810183015184820184015282016200040956fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461057557508163095ea7b3146104cb57816318160ddd146104ac57816323b872dd146103b8578163313ce5671461034357816340c10f191461024857816370a082311461021157816395d89b411461010e57508063a9059cbb146100de5763dd62ed3e1461009357600080fd5b346100da57806003193601126100da57806020926100af6106b3565b6100b76106ce565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100da57806003193601126100da576020906101076100fd6106b3565b6024359033610738565b5160018152f35b8383346100da57816003193601126100da57805191809380549160019083821c92828516948515610207575b60209586861081146101f4578589529081156101d05750600114610178575b610174878761016a828c0383610716565b519182918261066a565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106101bd57505050826101749461016a92820101948680610159565b805486850188015292860192810161019f565b60ff19168887015250505050151560051b830101925061016a826101748680610159565b634e487b7160e01b845260228352602484fd5b93607f169361013a565b5050346100da5760203660031901126100da5760209181906001600160a01b036102396106b3565b16815280845220549051908152f35b9190503461033f578060031936011261033f576102636106b3565b906024359080519261028660209467ebf101da1474a64d868201528581526106e4565b6102a0825167d071d67da4ce55ab868201528581526106e4565b6102ba825167b109354332797e46868201528581526106e4565b6001600160a01b031693841561032a576002549083820180921161031757506002558385528483528085208054830190555190815283917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a380f35b634e487b7160e01b875260119052602486fd5b85602492519163ec442f0560e01b8352820152fd5b8280fd5b8284346103b557806003193601126103b5575080519061037460209267f04499679c280a35848201528381526106e4565b61038e8151678fbc00053ae313d9848201528381526106e4565b6103a8815167296a853570ae83e8848201528381526106e4565b60ff600554169051908152f35b80fd5b905082346103b55760603660031901126103b5576103d46106b3565b6103dc6106ce565b916044359360018060a01b038316808352600160205286832033845260205286832054916000198310610418575b602088610107898989610738565b868310610480578115610469573315610452575082526001602090815286832033845281529186902090859003905582906101078761040a565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b5050346100da57816003193601126100da576020906002549051908152f35b90503461033f578160031936011261033f576104e56106b3565b60243590331561055e576001600160a01b031691821561054757508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b92915034610666578360031936011261066657600354600181811c918690828116801561065c575b6020958686108214610649575084885290811561062757506001146105ce575b610174868661016a828b0383610716565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061061457505050826101749461016a9282010194386105bd565b80548685018801529286019281016105f7565b60ff191687860152505050151560051b830101925061016a82610174386105bd565b634e487b7160e01b845260229052602483fd5b93607f169361059d565b8380fd5b6020808252825181830181905290939260005b82811061069f57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161067d565b600435906001600160a01b03821682036106c957565b600080fd5b602435906001600160a01b03821682036106c957565b6040810190811067ffffffffffffffff82111761070057604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761070057604052565b916001600160a01b038084169283156107fd57169283156107e457600090838252816020526040822054908382106107b2575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fdfea264697066735822122064be6eacf5d68ae00b5ad70b7f6f7900617263abc7269d095ecc15b5f98ac7d564736f6c63430008140033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, decimals_, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, decimals_, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
